{"version":3,"sources":["components/header/Header.js","components/post-form/PostForm.js","components/posts-display/post/Post.js","components/posts-display/PostDisplay.js","App.js","serviceWorker.js","index.js"],"names":["Header","heading","PostForm","setPosts","useState","title","setTitle","body","setBody","className","type","placeholder","value","onChange","e","target","rows","onClick","prevPosts","id","length","Post","deletePost","PostDisplay","posts","map","post","key","App","postId","filteredPosts","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4UASeA,MAJf,YAA4B,IAAXC,EAAU,EAAVA,QACf,OAAO,4BAAKA,I,aC0BCC,MA3Bf,YAAiC,IAAbC,EAAY,EAAZA,SAAY,EACJC,mBAAS,IADL,mBACvBC,EADuB,KAChBC,EADgB,OAENF,mBAAS,IAFH,mBAEvBG,EAFuB,KAEjBC,EAFiB,KAI9B,OACE,yBAAKC,UAAU,aACb,2BACEC,KAAK,OACLC,YAAY,0BACZC,MAAOP,EACPQ,SAAU,SAACC,GAAD,OAAOR,EAASQ,EAAEC,OAAOH,UAErC,8BACEI,KAAK,IACLL,YAAY,yBACZC,MAAOL,EACPM,SAAU,SAACC,GAAD,OAAON,EAAQM,EAAEC,OAAOH,UAEpC,4BACEK,QAAS,kBAAMd,GAAS,SAACe,GAAD,4BAAmBA,GAAnB,CAA8B,CAAEC,GAAID,EAAUE,OAAO,EAAEf,QAAOE,eADxF,iB,kBCJSc,MAdf,YAAgD,IAAhCF,EAA+B,EAA/BA,GAAId,EAA2B,EAA3BA,MAAOE,EAAoB,EAApBA,KAAMe,EAAc,EAAdA,WAC/B,OACE,yBAAKb,UAAU,QACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAcJ,GAC5B,uBAAGI,UAAU,aAAaF,GAC1B,4BAAQE,UAAU,iBAAiBQ,QAAS,kBAAMK,EAAWH,KAA7D,aCKOI,MAVf,YAA6C,IAAtBC,EAAqB,EAArBA,MAAOF,EAAc,EAAdA,WAC5B,OACE,yBAAKb,UAAU,gBACZe,EAAMC,KAAI,SAACC,GAAD,OACT,kBAAC,EAAD,CAAMP,GAAIO,EAAKP,GAAId,MAAOqB,EAAKrB,MAAOE,KAAMmB,EAAKnB,KAAMoB,IAAKD,EAAKP,GAAIG,WAAYA,SCiB1EM,MAjBf,WAAgB,IAAD,EACaxB,mBAAS,IADtB,mBACNoB,EADM,KACCrB,EADD,KAQb,OACE,yBAAKM,UAAU,OACb,kBAAC,EAAD,CAAQR,QAAQ,mBAChB,kBAAC,EAAD,CAAUE,SAAUA,IACpB,kBAAC,EAAD,CAAaqB,MAAOA,EAAOF,WATZ,SAACO,GAClB,IAAMC,EAAgBN,EAAMO,QAAO,SAACL,GAAD,OAAUA,EAAKP,KAAOU,KACzD1B,EAAS2B,QCHOE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d42f1ee1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n// stylesheet \r\nimport \"./Header.css\";\r\n\r\nfunction Header({heading}) {\r\n  return <h1>{heading}</h1>;\r\n}\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\n\r\n// stylesheet\r\nimport \"./PostForm.css\";\r\n\r\nfunction PostForm({ setPosts }) {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [body, setBody] = useState(\"\");\r\n\r\n  return (\r\n    <div className=\"post-form\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter title of the post\"\r\n        value={title}\r\n        onChange={(e) => setTitle(e.target.value)}\r\n      />\r\n      <textarea\r\n        rows=\"5\"\r\n        placeholder=\"Enter body of the post\"\r\n        value={body}\r\n        onChange={(e) => setBody(e.target.value)}\r\n      ></textarea>\r\n      <button\r\n        onClick={() => setPosts((prevPosts) => [...prevPosts, { id: prevPosts.length+1,title, body }])}\r\n      >\r\n        Create Post\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostForm;\r\n","import React from \"react\";\r\n\r\n// stylesheet\r\nimport \"./Post.css\";\r\n\r\nfunction Post({ id, title, body, deletePost }) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">{title}</h5>\r\n        <p className=\"card-text\">{body}</p>\r\n        <button className=\"btn btn-danger\" onClick={() => deletePost(id)}>\r\n          Delete\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\n\r\n// stylesheet\r\nimport \"./PostDisplay.css\";\r\nimport Post from \"./post/Post\";\r\n\r\nfunction PostDisplay({ posts, deletePost }) {\r\n  return (\r\n    <div className=\"post-display\">\r\n      {posts.map((post) => (\r\n        <Post id={post.id} title={post.title} body={post.body} key={post.id} deletePost={deletePost} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostDisplay;\r\n","import React, { useState } from \"react\";\n\n// custom components\nimport Header from \"./components/header/Header\";\nimport PostForm from \"./components/post-form/PostForm\";\n\n// stylesheet\nimport \"./App.css\";\nimport PostDisplay from \"./components/posts-display/PostDisplay\";\n\nfunction App() {\n  const [posts, setPosts] = useState([]);\n\n  const deletePost = (postId) => {\n    const filteredPosts = posts.filter((post) => post.id !== postId);\n    setPosts(filteredPosts);\n  };\n\n  return (\n    <div className=\"App\">\n      <Header heading=\"React Demo App\" />\n      <PostForm setPosts={setPosts} />\n      <PostDisplay posts={posts} deletePost={deletePost} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}